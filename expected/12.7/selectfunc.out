--
-- Test for push down functions in target list
--
--Testcase 380:
SET datestyle TO "ISO, YMD";
--Testcase 381:
SET timezone TO +00;
--Testcase 382:
SET intervalstyle to "postgres";
\set ECHO none
--Testcase 1:
CREATE EXTENSION griddb_fdw;
--Testcase 2:
CREATE SERVER griddb_svr FOREIGN DATA WRAPPER griddb_fdw OPTIONS (host :GRIDDB_HOST, port :GRIDDB_PORT, clustername 'griddbfdwTestCluster');
--Testcase 3:
CREATE USER MAPPING FOR public SERVER griddb_svr OPTIONS (username :GRIDDB_USER, password :GRIDDB_PASS);
IMPORT FOREIGN SCHEMA public LIMIT TO (student, time_series, time_series2) FROM SERVER griddb_svr INTO public;
--Select all
--Testcase 4:
SELECT * FROM student;
 name  | age |  location  | gpa 
-------+-----+------------+-----
 fred  |  28 | (3.1,-1.5) | 3.7
 larry |  60 | (21.8,4.9) | 3.1
(2 rows)

--
-- Test for non-unique functions of GridDB in WHERE clause
--
-- char_length
--Testcase 5:
EXPLAIN VERBOSE
SELECT * FROM student WHERE char_length(name) > 4 ;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((char_length(name) > 4))
(3 rows)

--Testcase 6:
SELECT * FROM student WHERE char_length(name) > 4 ;
 name  | age |  location  | gpa 
-------+-----+------------+-----
 larry |  60 | (21.8,4.9) | 3.1
(1 row)

--Testcase 7:
EXPLAIN VERBOSE
SELECT * FROM student WHERE char_length(name) < 6 ;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((char_length(name) < 6))
(3 rows)

--Testcase 8:
SELECT * FROM student WHERE char_length(name) < 6 ;
 name  | age |  location  | gpa 
-------+-----+------------+-----
 fred  |  28 | (3.1,-1.5) | 3.7
 larry |  60 | (21.8,4.9) | 3.1
(2 rows)

--Testcase 336:
EXPLAIN VERBOSE
SELECT * FROM student WHERE concat(name,' and george') = 'fred and george';
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((concat(name, ' and george') = 'fred and george'))
(3 rows)

--Testcase 337:
SELECT * FROM student WHERE concat(name,' and george') = 'fred and george';
 name | age |  location  | gpa 
------+-----+------------+-----
 fred |  28 | (3.1,-1.5) | 3.7
(1 row)

--substr
--Testcase 9:
EXPLAIN VERBOSE
SELECT * FROM student WHERE substr(name,2,3) = 'red';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((substring(name, 2, 3) = 'red'))
(3 rows)

--Testcase 10:
SELECT * FROM student WHERE substr(name,2,3) = 'red';
 name | age |  location  | gpa 
------+-----+------------+-----
 fred |  28 | (3.1,-1.5) | 3.7
(1 row)

--Testcase 11:
EXPLAIN VERBOSE
SELECT * FROM student WHERE substr(name,1,3) <> 'fre';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..138.59 rows=815 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((substring(name, 1, 3) <> 'fre'))
(3 rows)

--Testcase 12:
SELECT * FROM student WHERE substr(name,1,3) <> 'fre';
 name  | age |  location  | gpa 
-------+-----+------------+-----
 larry |  60 | (21.8,4.9) | 3.1
(1 row)

--upper
--Testcase 13:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE upper(name) = 'FRED';
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((upper(name) = 'FRED'))
(3 rows)

--Testcase 14:
SELECT * FROM student WHERE upper(name) = 'FRED';
 name | age |  location  | gpa 
------+-----+------------+-----
 fred |  28 | (3.1,-1.5) | 3.7
(1 row)

--Testcase 15:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE upper(name) <> 'FRED';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..138.59 rows=815 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((upper(name) <> 'FRED'))
(3 rows)

--Testcase 16:
SELECT * FROM student WHERE upper(name) <> 'FRED';
 name  | age |  location  | gpa 
-------+-----+------------+-----
 larry |  60 | (21.8,4.9) | 3.1
(1 row)

--lower
--Testcase 17:
INSERT INTO student VALUES ('GEORGE',30,'(1.2,-3.5)',3.8);
--Testcase 18:
INSERT INTO student VALUES ('BOB',35,'(5.2,3.8)',2.5);
--Testcase 19:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE lower(name) = 'george';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((lower(name) = 'george'))
(3 rows)

--Testcase 20:
SELECT * FROM student WHERE lower(name) = 'george';
  name  | age |  location  | gpa 
--------+-----+------------+-----
 GEORGE |  30 | (1.2,-3.5) | 3.8
(1 row)

--Testcase 21:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE lower(name) <> 'bob';
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..138.59 rows=815 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((lower(name) <> 'bob'))
(3 rows)

--Testcase 22:
SELECT * FROM student WHERE lower(name) <> 'bob';
  name  | age |  location  | gpa 
--------+-----+------------+-----
 fred   |  28 | (3.1,-1.5) | 3.7
 larry  |  60 | (21.8,4.9) | 3.1
 GEORGE |  30 | (1.2,-3.5) | 3.8
(3 rows)

--round
--Testcase 23:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE round(gpa) > 3.5;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((round(gpa) > 3.5))
(3 rows)

--Testcase 24:
SELECT * FROM student WHERE round(gpa) > 3.5;
  name  | age |  location  | gpa 
--------+-----+------------+-----
 fred   |  28 | (3.1,-1.5) | 3.7
 GEORGE |  30 | (1.2,-3.5) | 3.8
(2 rows)

--Testcase 25:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE round(gpa) <= 3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((round(gpa) <= 3))
(3 rows)

--Testcase 26:
SELECT * FROM student WHERE round(gpa) <= 3;
 name  | age |  location  | gpa 
-------+-----+------------+-----
 larry |  60 | (21.8,4.9) | 3.1
 BOB   |  35 | (5.2,3.8)  | 2.5
(2 rows)

--floor
--Testcase 27:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE floor(gpa) = 3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((floor(gpa) = 3))
(3 rows)

--Testcase 28:
SELECT * FROM student WHERE floor(gpa) = 3;
  name  | age |  location  | gpa 
--------+-----+------------+-----
 fred   |  28 | (3.1,-1.5) | 3.7
 larry  |  60 | (21.8,4.9) | 3.1
 GEORGE |  30 | (1.2,-3.5) | 3.8
(3 rows)

--Testcase 29:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE floor(gpa) < 2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((floor(gpa) < 2))
(3 rows)

--Testcase 30:
SELECT * FROM student WHERE floor(gpa) < 3;
 name | age | location  | gpa 
------+-----+-----------+-----
 BOB  |  35 | (5.2,3.8) | 2.5
(1 row)

--ceiling
--Testcase 31:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE ceiling(gpa) >= 3;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..127.75 rows=273 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((ceiling(gpa) >= 3))
(3 rows)

--Testcase 32:
SELECT * FROM student WHERE ceiling(gpa) >= 3;
  name  | age |  location  | gpa 
--------+-----+------------+-----
 fred   |  28 | (3.1,-1.5) | 3.7
 larry  |  60 | (21.8,4.9) | 3.1
 GEORGE |  30 | (1.2,-3.5) | 3.8
 BOB    |  35 | (5.2,3.8)  | 2.5
(4 rows)

--Testcase 33:
EXPLAIN VERBOSE 
SELECT * FROM student WHERE ceiling(gpa) = 4;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..122.37 rows=4 width=76)
   Output: name, age, location, gpa
   Remote SQL: SELECT  *  FROM student WHERE ((ceiling(gpa) = 4))
(3 rows)

--Testcase 34:
SELECT * FROM student WHERE ceiling(gpa) = 4;
  name  | age |  location  | gpa 
--------+-----+------------+-----
 fred   |  28 | (3.1,-1.5) | 3.7
 larry  |  60 | (21.8,4.9) | 3.1
 GEORGE |  30 | (1.2,-3.5) | 3.8
(3 rows)

--
--Test for unique functions of GridDB in WHERE clause: time functions
--
--Testcase 35:
\d time_series2
                                Foreign table "public.time_series2"
     Column     |             Type              | Collation | Nullable | Default |   FDW options   
----------------+-------------------------------+-----------+----------+---------+-----------------
 date           | timestamp without time zone   |           |          |         | (rowkey 'true')
 date2          | timestamp without time zone   |           |          |         | 
 strcol         | text                          |           |          |         | 
 booleancol     | boolean                       |           |          |         | 
 bytecol        | smallint                      |           |          |         | 
 shortcol       | smallint                      |           |          |         | 
 intcol         | integer                       |           |          |         | 
 longcol        | bigint                        |           |          |         | 
 floatcol       | real                          |           |          |         | 
 doublecol      | double precision              |           |          |         | 
 blobcol        | bytea                         |           |          |         | 
 stringarray    | text[]                        |           |          |         | 
 boolarray      | boolean[]                     |           |          |         | 
 bytearray      | smallint[]                    |           |          |         | 
 shortarray     | smallint[]                    |           |          |         | 
 integerarray   | integer[]                     |           |          |         | 
 longarray      | bigint[]                      |           |          |         | 
 floatarray     | real[]                        |           |          |         | 
 doublearray    | double precision[]            |           |          |         | 
 timestamparray | timestamp without time zone[] |           |          |         | 
Server: griddb_svr

--Testcase 36:
INSERT INTO time_series2 VALUES ('2020-12-29 04:40:00', '2000-12-29 04:40:00', '2020-01-05T20:30:00Z', 't', 0, 5, 100, 2000, 65.4, 2391.5, '7C8C893C8087F07883AF', ARRAY['aaa','bbb','ccc'],
ARRAY['t'::boolean,'f'::boolean,'t'::boolean],ARRAY[1,2,3,4],ARRAY[1,2,3],ARRAY[444,333,222],ARRAY[44444,22222,45555],ARRAY[2.3,4.2,62.1],ARRAY[444.2,554.3,5432.5],
ARRAY['2020-12-29 04:45:00'::timestamp,'2020-12-29 04:46:00'::timestamp]);
--Testcase 37:
INSERT INTO time_series2 VALUES ('2020-12-29 04:50:00', '2020-03-17 04:40:00', '2020-01-05T23:30:00Z', 'f', 20, 120, 1000, 2500, 44.5, 2432.78, '09C4A3E91E60BCD22357', ARRAY['abcdef','ghijkl','mnopqs'],
ARRAY['f'::boolean,'f'::boolean,'t'::boolean],ARRAY[2,9,11,25],ARRAY[45,22,35,50],ARRAY[4445,33,2221],ARRAY[25413,77548,36251],ARRAY[4.2,24.54,70.55],ARRAY[4431.63,-200.14,3265.1],
ARRAY['2020-12-31 14:00:00'::timestamp,'2020-12-31 14:45:00'::timestamp, '2020-01-01 15:00:00']);
--Testcase 38:
INSERT INTO time_series2 VALUES ('2020-12-29 05:00:30', '2020-12-11 02:30:30', '2020-01-05T22:00:00Z', 'f', 11, 175, 1234, 7705, 15.72, 1435.22, '2F63A64D987344F83AC8', ARRAY['7777a32ebea96a918b0f','40ee382083b987e94dd1','d417cf517eca8c2a709a'],
ARRAY['t'::boolean,'t'::boolean,'f'::boolean,'f'::boolean],ARRAY[12,29,1,14,16],ARRAY[255,124,77,51],ARRAY[2697,2641,7777],ARRAY[12475,12346,12654],ARRAY[22.5,12.11,23.54],ARRAY[3567.21,2124.23,-1254.11],
ARRAY['2020-05-19 14:15:20'::timestamp,'2020-11-14 17:45:14'::timestamp, '2020-09-05 01:24:06']);
--griddb_timestamp: push down timestamp function to GridDB
--Testcase 39:
EXPLAIN VERBOSE
SELECT date, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol FROM time_series2 WHERE griddb_timestamp(strcol) > '2020-01-05 21:00:00';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..346.86 rows=293 width=69)
   Output: date, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestamp(strcol) > TIMESTAMP('2020-01-05T21:00:00Z')))
(3 rows)

--Testcase 40:
SELECT date, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol FROM time_series2 WHERE griddb_timestamp(strcol) > '2020-01-05 21:00:00';
        date         |        strcol        | booleancol | bytecol | shortcol | intcol | longcol | floatcol | doublecol 
---------------------+----------------------+------------+---------+----------+--------+---------+----------+-----------
 2020-12-29 04:50:00 | 2020-01-05T23:30:00Z | f          |      20 |      120 |   1000 |    2500 |     44.5 |   2432.78
 2020-12-29 05:00:30 | 2020-01-05T22:00:00Z | f          |      11 |      175 |   1234 |    7705 |    15.72 |   1435.22
(2 rows)

--Testcase 41:
EXPLAIN VERBOSE
SELECT date, strcol FROM time_series2 WHERE date < griddb_timestamp(strcol);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..454.54 rows=427 width=40)
   Output: date, strcol
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((date < timestamp(strcol)))
(3 rows)

--Testcase 42:
SELECT date, strcol FROM time_series2 WHERE date < griddb_timestamp(strcol);
 date | strcol 
------+--------
(0 rows)

--griddb_timestamp: push down timestamp function to GridDB and gets error because GridDB only support YYYY-MM-DDThh:mm:ss.SSSZ format for timestamp function
--Testcase 43:
UPDATE time_series2 SET strcol = '2020-01-05 21:00:00';
--Testcase 44:
EXPLAIN VERBOSE
SELECT date, strcol FROM time_series2 WHERE griddb_timestamp(strcol) = '2020-01-05 21:00:00';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..446.12 rows=6 width=40)
   Output: date, strcol
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestamp(strcol) = TIMESTAMP('2020-01-05T21:00:00Z')))
(3 rows)

--Testcase 45:
SELECT date, strcol FROM time_series2 WHERE griddb_timestamp(strcol) = '2020-01-05 21:00:00';
ERROR:  GridDB-API is failed by 152010
  [152010:TQ_CONSTRAINT_INVALID_ARGUMENT_TYPE] Cannot parse argument as Timestamp,2020-01-05 21:00:00 (address=127.0.0.1:10001, partition=31)
  [152010:TQ_CONSTRAINT_INVALID_ARGUMENT_TYPE] Cannot parse argument as Timestamp,2020-01-05 21:00:00

--timestampadd
--YEAR
--Testcase 46:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, -1) > '2019-12-29 05:00:00';
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('YEAR', date, (-1)) > TIMESTAMP('2019-12-29T05:00:00Z')))
(3 rows)

--Testcase 47:
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, -1) > '2019-12-29 05:00:00';
        date         
---------------------
 2020-12-29 05:00:30
(1 row)

--Testcase 48:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, 5) >= '2025-12-29 04:50:00';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('YEAR', date, 5) >= TIMESTAMP('2025-12-29T04:50:00Z')))
(3 rows)

--Testcase 49:
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, 5) >= '2025-12-29 04:50:00';
        date         
---------------------
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(2 rows)

--Testcase 50:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, 5) >= '2025-12-29';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('YEAR', date, 5) >= TIMESTAMP('2025-12-29T00:00:00Z')))
(3 rows)

--Testcase 51:
SELECT date FROM time_series2 WHERE timestampadd('YEAR', date, 5) >= '2025-12-29';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(3 rows)

--MONTH
--Testcase 52:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, -3) > '2020-06-29 05:00:00';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MONTH', date, (-3)) > TIMESTAMP('2020-06-29T05:00:00Z')))
(3 rows)

--Testcase 53:
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, -3) > '2020-06-29 05:00:00';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(3 rows)

--Testcase 54:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, 3) = '2021-03-29 05:00:30';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MONTH', date, 3) = TIMESTAMP('2021-03-29T05:00:30Z')))
(3 rows)

--Testcase 55:
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, 3) = '2021-03-29 05:00:30';
        date         
---------------------
 2020-12-29 05:00:30
(1 row)

--Testcase 56:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, 3) >= '2021-03-29';
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MONTH', date, 3) >= TIMESTAMP('2021-03-29T00:00:00Z')))
(3 rows)

--Testcase 57:
SELECT date FROM time_series2 WHERE timestampadd('MONTH', date, 3) >= '2021-03-29';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(3 rows)

--DAY
--Testcase 58:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, -3) > '2020-06-29 05:00:00';
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('DAY', date, (-3)) > TIMESTAMP('2020-06-29T05:00:00Z')))
(3 rows)

--Testcase 59:
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, -3) > '2020-06-29 05:00:00';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(3 rows)

--Testcase 60:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, 3) = '2021-01-01 05:00:30';
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('DAY', date, 3) = TIMESTAMP('2021-01-01T05:00:30Z')))
(3 rows)

--Testcase 61:
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, 3) = '2021-01-01 05:00:30';
        date         
---------------------
 2020-12-29 05:00:30
(1 row)

--Testcase 62:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, 3) >= '2021-01-01';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('DAY', date, 3) >= TIMESTAMP('2021-01-01T00:00:00Z')))
(3 rows)

--Testcase 63:
SELECT date FROM time_series2 WHERE timestampadd('DAY', date, 3) >= '2021-01-01';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(3 rows)

--HOUR
--Testcase 64:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('HOUR', date, -1) > '2020-12-29 04:00:00';
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('HOUR', date, (-1)) > TIMESTAMP('2020-12-29T04:00:00Z')))
(3 rows)

--Testcase 65:
SELECT date FROM time_series2 WHERE timestampadd('HOUR', date, -1) > '2020-12-29 04:00:00';
        date         
---------------------
 2020-12-29 05:00:30
(1 row)

--Testcase 66:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('HOUR', date, 2) >= '2020-12-29 06:50:00';
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('HOUR', date, 2) >= TIMESTAMP('2020-12-29T06:50:00Z')))
(3 rows)

--Testcase 67:
SELECT date FROM time_series2 WHERE timestampadd('HOUR', date, 2) >= '2020-12-29 06:50:00';
        date         
---------------------
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(2 rows)

--MINUTE
--Testcase 68:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MINUTE', date, 20) = '2020-12-29 05:00:00';
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MINUTE', date, 20) = TIMESTAMP('2020-12-29T05:00:00Z')))
(3 rows)

--Testcase 69:
SELECT date FROM time_series2 WHERE timestampadd('MINUTE', date, 20) = '2020-12-29 05:00:00';
        date         
---------------------
 2020-12-29 04:40:00
(1 row)

--Testcase 70:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MINUTE', date, -50) <= '2020-12-29 04:00:00';
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MINUTE', date, (-50)) <= TIMESTAMP('2020-12-29T04:00:00Z')))
(3 rows)

--Testcase 71:
SELECT date FROM time_series2 WHERE timestampadd('MINUTE', date, -50) <= '2020-12-29 04:00:00';
        date         
---------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
(2 rows)

--SECOND
--Testcase 72:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('SECOND', date, 25) >= '2020-12-29 04:40:30';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('SECOND', date, 25) >= TIMESTAMP('2020-12-29T04:40:30Z')))
(3 rows)

--Testcase 73:
SELECT date FROM time_series2 WHERE timestampadd('SECOND', date, 25) >= '2020-12-29 04:40:30';
        date         
---------------------
 2020-12-29 04:50:00
 2020-12-29 05:00:30
(2 rows)

--Testcase 74:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('SECOND', date, -50) <= '2020-12-29 04:00:00';
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('SECOND', date, (-50)) <= TIMESTAMP('2020-12-29T04:00:00Z')))
(3 rows)

--Testcase 75:
SELECT date FROM time_series2 WHERE timestampadd('SECOND', date, -30) = '2020-12-29 05:00:00';
        date         
---------------------
 2020-12-29 05:00:30
(1 row)

--MILLISECOND
--Testcase 76:
INSERT INTO time_series2 VALUES ('2020-12-29 05:10:00.120', '2020-12-29 05:10:00.563', '2020-01-05T20:30:30Z', 't', 0, 5, 30000000, 2000, 65.4, 2391.5, '7731b23fa1437ab784e3', ARRAY['aaa','bbb','ccc'],
ARRAY['t'::boolean,'f'::boolean,'t'::boolean],ARRAY[1,2,3,4],ARRAY[1,2,3],ARRAY[444,333,222],ARRAY[44444,22222,45555],ARRAY[2.3,4.2,62.1],ARRAY[444.2,554.3,5432.5],
ARRAY['2020-12-29 04:45:00'::timestamp,'2020-12-29 04:46:00'::timestamp]);
--Testcase 77:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MILLISECOND', date, 300) = '2020-12-29 05:10:00.420';
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MILLISECOND', date, 300) = TIMESTAMP('2020-12-29T05:10:00.420Z')))
(3 rows)

--Testcase 78:
SELECT date FROM time_series2 WHERE timestampadd('MILLISECOND', date, 300) = '2020-12-29 05:10:00.420';
          date          
------------------------
 2020-12-29 05:10:00.12
(1 row)

--Testcase 79:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MILLISECOND', date, -55) = '2020-12-29 05:10:00.065';
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MILLISECOND', date, (-55)) = TIMESTAMP('2020-12-29T05:10:00.065Z')))
(3 rows)

--Testcase 80:
SELECT date FROM time_series2 WHERE timestampadd('MILLISECOND', date, -55) = '2020-12-29 05:10:00.065';
          date          
------------------------
 2020-12-29 05:10:00.12
(1 row)

--Input wrong unit
--Testcase 81:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampadd('MICROSECOND', date, -55) = '2020-12-29 05:10:00.065';
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampadd('MICROSECOND', date, (-55)) = TIMESTAMP('2020-12-29T05:10:00.065Z')))
(3 rows)

--timestampdiff
--YEAR
--Testcase 82:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampdiff('YEAR', date, '2018-01-04 08:48:00') > 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('YEAR', date, TIMESTAMP('2018-01-04T08:48:00Z')) > 0))
(3 rows)

--Testcase 83:
SELECT date FROM time_series2 WHERE timestampdiff('YEAR', date, '2018-01-04 08:48:00') > 0;
          date          
------------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
 2020-12-29 05:10:00.12
(4 rows)

--Testcase 84:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('YEAR', '2015-07-15 08:48:00', date2) < 5;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('YEAR', TIMESTAMP('2015-07-15T08:48:00Z'), date2) < 5))
(3 rows)

--Testcase 85:
SELECT date2 FROM time_series2 WHERE timestampdiff('YEAR', '2015-07-15 08:48:00', date2) < 5;
          date2          
-------------------------
 2020-03-17 04:40:00
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(3 rows)

--Testcase 86:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('YEAR', date, date2) > 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('YEAR', date, date2) > 10))
(3 rows)

--Testcase 87:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('YEAR', date, date2) > 10;
        date         |        date2        
---------------------+---------------------
 2020-12-29 04:40:00 | 2000-12-29 04:40:00
(1 row)

--MONTH
--Testcase 88:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampdiff('MONTH', date, '2020-11-04 08:48:00') = 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..782.26 rows=13 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MONTH', date, TIMESTAMP('2020-11-04T08:48:00Z')) = 1))
(3 rows)

--Testcase 89:
SELECT date FROM time_series2 WHERE timestampdiff('MONTH', date, '2020-11-04 08:48:00') = 1;
          date          
------------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
 2020-12-29 05:10:00.12
(4 rows)

--Testcase 90:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('YEAR', '2020-02-15 08:48:00', date2) < 5;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('YEAR', TIMESTAMP('2020-02-15T08:48:00Z'), date2) < 5))
(3 rows)

--Testcase 91:
SELECT date2 FROM time_series2 WHERE timestampdiff('YEAR', '2020-02-15 08:48:00', date2) < 5;
          date2          
-------------------------
 2020-03-17 04:40:00
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(3 rows)

--Testcase 92:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MONTH', date, date2) < 10;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MONTH', date, date2) < 10))
(3 rows)

--Testcase 93:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MONTH', date, date2) < 10;
          date          |          date2          
------------------------+-------------------------
 2020-12-29 04:50:00    | 2020-03-17 04:40:00
 2020-12-29 05:00:30    | 2020-12-11 02:30:30
 2020-12-29 05:10:00.12 | 2020-12-29 05:10:00.563
(3 rows)

--DAY
--Testcase 94:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('DAY', date2, '2020-12-04 08:48:00') > 20;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('DAY', date2, TIMESTAMP('2020-12-04T08:48:00Z')) > 20))
(3 rows)

--Testcase 95:
SELECT date2 FROM time_series2 WHERE timestampdiff('DAY', date2, '2020-12-04 08:48:00') > 20;
          date2          
-------------------------
 2020-12-29 05:10:00.563
(1 row)

--Testcase 96:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('DAY', '2020-02-15 08:48:00', date2) < 5;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('DAY', TIMESTAMP('2020-02-15T08:48:00Z'), date2) < 5))
(3 rows)

--Testcase 97:
SELECT date2 FROM time_series2 WHERE timestampdiff('DAY', '2020-02-15 08:48:00', date2) < 5;
          date2          
-------------------------
 2020-03-17 04:40:00
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(3 rows)

--Testcase 98:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('DAY', date, date2) > 10;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('DAY', date, date2) > 10))
(3 rows)

--Testcase 99:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('DAY', date, date2) > 10;
        date         |        date2        
---------------------+---------------------
 2020-12-29 04:40:00 | 2000-12-29 04:40:00
 2020-12-29 04:50:00 | 2020-03-17 04:40:00
 2020-12-29 05:00:30 | 2020-12-11 02:30:30
(3 rows)

--HOUR
--Testcase 100:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE timestampdiff('HOUR', date, '2020-12-29 07:40:00') < 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('HOUR', date, TIMESTAMP('2020-12-29T07:40:00Z')) < 0))
(3 rows)

--Testcase 101:
SELECT date FROM time_series2 WHERE timestampdiff('HOUR', date, '2020-12-29 07:40:00') < 0;
          date          
------------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
 2020-12-29 05:10:00.12
(4 rows)

--Testcase 102:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('HOUR', '2020-12-15 08:48:00', date2) > 3.5;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('HOUR', TIMESTAMP('2020-12-15T08:48:00Z'), date2) > 3.5))
(3 rows)

--Testcase 103:
SELECT date2 FROM time_series2 WHERE timestampdiff('HOUR', '2020-12-15 08:48:00', date2) > 3.5;
        date2        
---------------------
 2000-12-29 04:40:00
 2020-03-17 04:40:00
 2020-12-11 02:30:30
(3 rows)

--Testcase 104:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('HOUR', date, date2) > 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('HOUR', date, date2) > 10))
(3 rows)

--Testcase 105:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('HOUR', date, date2) > 10;
        date         |        date2        
---------------------+---------------------
 2020-12-29 04:40:00 | 2000-12-29 04:40:00
 2020-12-29 04:50:00 | 2020-03-17 04:40:00
 2020-12-29 05:00:30 | 2020-12-11 02:30:30
(3 rows)

--MINUTE
--Testcase 106:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('MINUTE', date2, '2020-12-04 08:48:00') > 20;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MINUTE', date2, TIMESTAMP('2020-12-04T08:48:00Z')) > 20))
(3 rows)

--Testcase 107:
SELECT date2 FROM time_series2 WHERE timestampdiff('MINUTE', date2, '2020-12-04 08:48:00') > 20;
          date2          
-------------------------
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(2 rows)

--Testcase 108:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('MINUTE', '2020-02-15 08:48:00', date2) < 5;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MINUTE', TIMESTAMP('2020-02-15T08:48:00Z'), date2) < 5))
(3 rows)

--Testcase 109:
SELECT date2 FROM time_series2 WHERE timestampdiff('MINUTE', '2020-02-15 08:48:00', date2) < 5;
          date2          
-------------------------
 2020-03-17 04:40:00
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(3 rows)

--Testcase 110:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MINUTE', date, date2) > 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MINUTE', date, date2) > 10))
(3 rows)

--Testcase 111:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MINUTE', date, date2) > 10;
        date         |        date2        
---------------------+---------------------
 2020-12-29 04:40:00 | 2000-12-29 04:40:00
 2020-12-29 04:50:00 | 2020-03-17 04:40:00
 2020-12-29 05:00:30 | 2020-12-11 02:30:30
(3 rows)

--SECOND
--Testcase 112:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('SECOND', date2, '2020-12-04 08:48:00') > 1000;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('SECOND', date2, TIMESTAMP('2020-12-04T08:48:00Z')) > 1000))
(3 rows)

--Testcase 113:
SELECT date2 FROM time_series2 WHERE timestampdiff('SECOND', date2, '2020-12-04 08:48:00') > 1000;
          date2          
-------------------------
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(2 rows)

--Testcase 114:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('SECOND', '2020-03-17 04:50:00', date2) < 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('SECOND', TIMESTAMP('2020-03-17T04:50:00Z'), date2) < 100))
(3 rows)

--Testcase 115:
SELECT date2 FROM time_series2 WHERE timestampdiff('SECOND', '2020-03-17 04:50:00', date2) < 100;
          date2          
-------------------------
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(2 rows)

--Testcase 116:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('SECOND', date, date2) > 1600000;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..661.26 rows=683 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('SECOND', date, date2) > 1600000))
(3 rows)

--Testcase 117:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('SECOND', date, date2) > 1600000;
        date         |        date2        
---------------------+---------------------
 2020-12-29 04:40:00 | 2000-12-29 04:40:00
 2020-12-29 04:50:00 | 2020-03-17 04:40:00
(2 rows)

--MILLISECOND
--Testcase 118:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', date2, '2020-12-04 08:48:00') > 200;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MILLISECOND', date2, TIMESTAMP('2020-12-04T08:48:00Z')) > 200))
(3 rows)

--Testcase 119:
SELECT date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', date2, '2020-12-04 08:48:00') > 200;
          date2          
-------------------------
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(2 rows)

--Testcase 120:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', '2020-03-17 08:48:00', date2) < 0;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MILLISECOND', TIMESTAMP('2020-03-17T08:48:00Z'), date2) < 0))
(3 rows)

--Testcase 121:
SELECT date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', '2020-03-17 08:48:00', date2) < 0;
          date2          
-------------------------
 2020-12-11 02:30:30
 2020-12-29 05:10:00.563
(2 rows)

--Testcase 122:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', date, date2) = -443;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..647.80 rows=10 width=16)
   Output: date, date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MILLISECOND', date, date2) = (-443)))
(3 rows)

--Testcase 123:
SELECT date, date2 FROM time_series2 WHERE timestampdiff('MILLISECOND', date, date2) = -443;
          date          |          date2          
------------------------+-------------------------
 2020-12-29 05:10:00.12 | 2020-12-29 05:10:00.563
(1 row)

--Input wrong unit
--Testcase 124:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('MICROSECOND', date2, '2020-12-04 08:48:00') > 20;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((timestampdiff('MICROSECOND', date2, TIMESTAMP('2020-12-04T08:48:00Z')) > 20))
(3 rows)

--Testcase 125:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE timestampdiff('DECADE', '2020-02-15 08:48:00', date2) < 5;
ERROR:  invalid input value for enum time_unit: "DECADE"
LINE 2: ...ELECT date2 FROM time_series2 WHERE timestampdiff('DECADE', ...
                                                             ^
--Testcase 126:
EXPLAIN VERBOSE
SELECT date, date2 FROM time_series2 WHERE timestampdiff('NANOSECOND', date, date2) > 10;
ERROR:  invalid input value for enum time_unit: "NANOSECOND"
LINE 2: ...date, date2 FROM time_series2 WHERE timestampdiff('NANOSECON...
                                                             ^
--to_timestamp_ms
--Normal case
--Testcase 127:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE to_timestamp_ms(intcol) > '1970-01-01 1:00:00';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..805.46 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((to_timestamp_ms((intcol)) > TIMESTAMP('1970-01-01T01:00:00Z')))
(3 rows)

--Testcase 128:
SELECT date FROM time_series2 WHERE to_timestamp_ms(intcol) > '1970-01-01 1:00:00';
          date          
------------------------
 2020-12-29 05:10:00.12
(1 row)

--Return error if column contains -1 value
--Testcase 129:
INSERT INTO time_series2 VALUES ('2020-12-29 05:20:00.120', '2020-12-29 05:10:00.563', '2020-01-05T20:30:30Z', 't', 0, 5, -1, 2000, 65.4, 2391.5, '7731b23fa1437ab784e3', ARRAY['aaa','bbb','ccc'],
ARRAY['t'::boolean,'f'::boolean,'t'::boolean],ARRAY[1,2,3,4],ARRAY[1,2,3],ARRAY[444,333,222],ARRAY[44444,22222,45555],ARRAY[2.3,4.2,62.1],ARRAY[444.2,554.3,5432.5],
ARRAY['2020-12-29 04:45:00'::timestamp,'2020-12-29 04:46:00'::timestamp]);
--Testcase 130:
SELECT date FROM time_series2 WHERE to_timestamp_ms(intcol) > '1970-01-01 1:00:00';
ERROR:  GridDB-API is failed by 152012
  [152012:TQ_CONSTRAINT_INVALID_ARGUMENT_RANGE] Argument 1 is out of timestamp range (address=127.0.0.1:10001, partition=31)
  [152012:TQ_CONSTRAINT_INVALID_ARGUMENT_RANGE] Argument 1 is out of timestamp range

--to_epoch_ms
--Testcase 131:
EXPLAIN VERBOSE
SELECT date FROM time_series2 WHERE intcol < to_epoch_ms(date);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((intcol < to_epoch_ms(date)))
(3 rows)

--Testcase 132:
SELECT date FROM time_series2 WHERE intcol < to_epoch_ms(date);
          date          
------------------------
 2020-12-29 04:40:00
 2020-12-29 04:50:00
 2020-12-29 05:00:30
 2020-12-29 05:10:00.12
 2020-12-29 05:20:00.12
(5 rows)

--Testcase 133:
EXPLAIN VERBOSE
SELECT date2 FROM time_series2 WHERE to_epoch_ms(date2) < 1000000000000;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..799.06 rows=853 width=8)
   Output: date2
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((to_epoch_ms(date2) < 1000000000000))
(3 rows)

-- Test for now() pushdown function of griddb
-- griddb_now as parameter of timestampdiff()
--Testcase 383:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) < 0))
(3 rows)

--Testcase 384:
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
(4 rows)

--Testcase 385:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) > 0;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) > 0))
(3 rows)

--Testcase 386:
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) > 0;
        date         | value1 | value2 
---------------------+--------+--------
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(2 rows)

--Testcase 387:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('HOUR', griddb_now(), '2020-12-04 08:48:00') > 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('HOUR', now(), TIMESTAMP('2020-12-04T08:48:00Z')) > 0))
(3 rows)

--Testcase 388:
SELECT * FROM time_series WHERE timestampdiff('HOUR', griddb_now(), '2020-12-04 08:48:00') > 0;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(6 rows)

--Testcase 389:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', griddb_now(), '2032-12-04 08:48:00') < 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', now(), TIMESTAMP('2032-12-04T08:48:00Z')) < 0))
(3 rows)

--Testcase 390:
SELECT * FROM time_series WHERE timestampdiff('YEAR', griddb_now(), '2032-12-04 08:48:00') < 0;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(6 rows)

-- griddb_now as parameter of timestampadd()
--Testcase 391:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE date > timestampadd('YEAR', griddb_now(), -1);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((date > timestampadd('YEAR', now(), (-1))))
(3 rows)

--Testcase 392:
SELECT * FROM time_series WHERE date > timestampadd('YEAR', griddb_now(), -1);
        date         | value1 | value2 
---------------------+--------+--------
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(2 rows)

--Testcase 393:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE date < timestampadd('YEAR', griddb_now(), -1);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((date < timestampadd('YEAR', now(), (-1))))
(3 rows)

--Testcase 394:
SELECT * FROM time_series WHERE date < timestampadd('YEAR', griddb_now(), -1);
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
(4 rows)

-- griddb_now() in expression
--Testcase 395:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE date < griddb_now();
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..610.91 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((date < now()))
(3 rows)

--Testcase 396:
SELECT * FROM time_series WHERE date < griddb_now();
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
(4 rows)

--Testcase 397:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE date > griddb_now();
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..610.91 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((date > now()))
(3 rows)

--Testcase 398:
SELECT * FROM time_series WHERE date > griddb_now();
        date         | value1 | value2 
---------------------+--------+--------
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(2 rows)

--Testcase 399:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE date <= griddb_now();
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..610.91 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((date <= now()))
(3 rows)

--Testcase 400:
SELECT * FROM time_series WHERE date <= griddb_now();
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
(4 rows)

-- griddb_now() to_epoch_ms()
--Testcase 401:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE to_epoch_ms(griddb_now()) > 0;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1076.16 rows=620 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((to_epoch_ms(now()) > 0))
(3 rows)

--Testcase 402:
SELECT * FROM time_series WHERE to_epoch_ms(griddb_now()) > 0;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(6 rows)

-- griddb_now() other cases
--Testcase 403:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE griddb_now() IS NOT NULL;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..630.90 rows=1852 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((now() IS NOT NULL))
(3 rows)

--Testcase 404:
SELECT * FROM time_series WHERE griddb_now() IS NOT NULL;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(6 rows)

--Testcase 405:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) > 0 OR timestampdiff('YEAR', date, griddb_now()) < 0;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..2019.59 rows=1034 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE (((timestampdiff('YEAR', date, now()) > 0) OR (timestampdiff('YEAR', date, now()) < 0)))
(3 rows)

--Testcase 406:
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) > 0 OR timestampdiff('YEAR', date, griddb_now()) < 0;
        date         | value1 | value2 
---------------------+--------+--------
 2018-12-01 10:00:00 |      1 |   10.3
 2018-12-01 10:10:00 |      2 |    5.7
 2018-12-01 10:20:00 |      3 |    8.2
 2018-12-01 10:40:00 |      4 |    4.5
 2080-12-01 10:40:00 |      5 |    5.5
 2081-12-01 10:40:00 |      6 |    6.6
(6 rows)

--Testcase 407:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0 ORDER BY value1 ASC;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=10.00..10.00 rows=10 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) < 0)) ORDER BY value1 ASC
(3 rows)

--Testcase 408:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0 ORDER BY value1 DESC;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=10.00..10.00 rows=10 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) < 0)) ORDER BY value1 DESC
(3 rows)

--Testcase 409:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0 ORDER BY value2 ASC;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=10.00..10.00 rows=10 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) < 0)) ORDER BY value2 ASC
(3 rows)

--Testcase 410:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE timestampdiff('YEAR', date, griddb_now()) < 0 ORDER BY value2 DESC;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=10.00..10.00 rows=10 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((timestampdiff('YEAR', date, now()) < 0)) ORDER BY value2 DESC
(3 rows)

--
--Test for unique functions of GridDB in WHERE clause: array functions
--
--array_length
--Testcase 134:
EXPLAIN VERBOSE
SELECT boolarray FROM time_series2 WHERE array_length(boolarray) = 3;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..493.92 rows=7 width=32)
   Output: boolarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((array_length(boolarray) = 3))
(3 rows)

--Testcase 135:
SELECT boolarray FROM time_series2 WHERE array_length(boolarray) = 3;
 boolarray 
-----------
 {t,f,t}
 {f,f,t}
 {t,f,t}
 {t,f,t}
(4 rows)

--Testcase 136:
EXPLAIN VERBOSE
SELECT stringarray FROM time_series2 WHERE array_length(stringarray) = 3;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..493.92 rows=7 width=32)
   Output: stringarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((array_length(stringarray) = 3))
(3 rows)

--Testcase 137:
SELECT stringarray FROM time_series2 WHERE array_length(stringarray) = 3;
                           stringarray                            
------------------------------------------------------------------
 {aaa,bbb,ccc}
 {abcdef,ghijkl,mnopqs}
 {7777a32ebea96a918b0f,40ee382083b987e94dd1,d417cf517eca8c2a709a}
 {aaa,bbb,ccc}
 {aaa,bbb,ccc}
(5 rows)

--Testcase 138:
EXPLAIN VERBOSE
SELECT bytearray, shortarray FROM time_series2 WHERE array_length(bytearray) > array_length(shortarray);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..592.83 rows=310 width=64)
   Output: bytearray, shortarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((array_length(bytearray) > array_length(shortarray)))
(3 rows)

--Testcase 139:
SELECT bytearray, shortarray FROM time_series2 WHERE array_length(bytearray) > array_length(shortarray);
    bytearray    |   shortarray    
-----------------+-----------------
 {1,2,3,4}       | {1,2,3}
 {12,29,1,14,16} | {255,124,77,51}
 {1,2,3,4}       | {1,2,3}
 {1,2,3,4}       | {1,2,3}
(4 rows)

--Testcase 140:
EXPLAIN VERBOSE
SELECT integerarray, longarray FROM time_series2 WHERE array_length(integerarray) = array_length(longarray);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..586.72 rows=5 width=64)
   Output: integerarray, longarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((array_length(integerarray) = array_length(longarray)))
(3 rows)

--Testcase 141:
SELECT integerarray, longarray FROM time_series2 WHERE array_length(integerarray) = array_length(longarray);
   integerarray   |      longarray      
------------------+---------------------
 {444,333,222}    | {44444,22222,45555}
 {4445,33,2221}   | {25413,77548,36251}
 {2697,2641,7777} | {12475,12346,12654}
 {444,333,222}    | {44444,22222,45555}
 {444,333,222}    | {44444,22222,45555}
(5 rows)

--Testcase 142:
EXPLAIN VERBOSE
SELECT floatarray, doublearray FROM time_series2 WHERE array_length(floatarray) - array_length(doublearray) = 0;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..589.05 rows=5 width=64)
   Output: floatarray, doublearray
   Remote SQL: SELECT  *  FROM time_series2 WHERE (((array_length(floatarray) - array_length(doublearray)) = 0))
(3 rows)

--Testcase 143:
SELECT floatarray, doublearray FROM time_series2 WHERE array_length(floatarray) - array_length(doublearray) = 0;
     floatarray     |        doublearray         
--------------------+----------------------------
 {2.3,4.2,62.1}     | {444.2,554.3,5432.5}
 {4.2,24.54,70.55}  | {4431.63,-200.14,3265.1}
 {22.5,12.11,23.54} | {3567.21,2124.23,-1254.11}
 {2.3,4.2,62.1}     | {444.2,554.3,5432.5}
 {2.3,4.2,62.1}     | {444.2,554.3,5432.5}
(5 rows)

--Testcase 144:
EXPLAIN VERBOSE
SELECT timestamparray FROM time_series2 WHERE array_length(timestamparray) < 3;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..503.52 rows=487 width=32)
   Output: timestamparray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((array_length(timestamparray) < 3))
(3 rows)

--Testcase 145:
SELECT timestamparray FROM time_series2 WHERE array_length(timestamparray) < 3;
                timestamparray                 
-----------------------------------------------
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
(3 rows)

--element
--Normal case
--Testcase 146:
EXPLAIN VERBOSE
SELECT boolarray FROM time_series2 WHERE element(1, boolarray) = 'f';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..509.62 rows=975 width=32)
   Output: boolarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((NOT element(1, boolarray)))
(3 rows)

--Testcase 147:
SELECT boolarray FROM time_series2 WHERE element(1, boolarray) = 'f';
 boolarray 
-----------
 {t,f,t}
 {f,f,t}
 {t,f,t}
 {t,f,t}
(4 rows)

--Testcase 148:
EXPLAIN VERBOSE
SELECT stringarray FROM time_series2 WHERE element(1, stringarray) != 'bbb';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..522.88 rows=1455 width=32)
   Output: stringarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((element(1, stringarray) <> 'bbb'))
(3 rows)

--Testcase 149:
SELECT stringarray FROM time_series2 WHERE element(1, stringarray) != 'bbb';
                           stringarray                            
------------------------------------------------------------------
 {abcdef,ghijkl,mnopqs}
 {7777a32ebea96a918b0f,40ee382083b987e94dd1,d417cf517eca8c2a709a}
(2 rows)

--Testcase 150:
EXPLAIN VERBOSE
SELECT bytearray, shortarray FROM time_series2 WHERE element(0, bytearray) = element(0, shortarray);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..586.72 rows=5 width=64)
   Output: bytearray, shortarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((element(0, bytearray) = element(0, shortarray)))
(3 rows)

--Testcase 151:
SELECT bytearray, shortarray FROM time_series2 WHERE element(0, bytearray) = element(0, shortarray);
 bytearray | shortarray 
-----------+------------
 {1,2,3,4} | {1,2,3}
 {1,2,3,4} | {1,2,3}
 {1,2,3,4} | {1,2,3}
(3 rows)

--Testcase 152:
EXPLAIN VERBOSE
SELECT integerarray, longarray FROM time_series2 WHERE element(0, integerarray)*100+44 = element(0,longarray);
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..591.38 rows=5 width=64)
   Output: integerarray, longarray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((((element(0, integerarray) * 100) + 44) = element(0, longarray)))
(3 rows)

--Testcase 153:
SELECT integerarray, longarray FROM time_series2 WHERE element(0, integerarray)*100+44 = element(0,longarray);
 integerarray  |      longarray      
---------------+---------------------
 {444,333,222} | {44444,22222,45555}
 {444,333,222} | {44444,22222,45555}
 {444,333,222} | {44444,22222,45555}
(3 rows)

--Testcase 154:
EXPLAIN VERBOSE
SELECT floatarray, doublearray FROM time_series2 WHERE element(2, floatarray)*10 < element(0,doublearray);
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..595.15 rows=310 width=64)
   Output: floatarray, doublearray
   Remote SQL: SELECT  *  FROM time_series2 WHERE (((element(2, floatarray) * 10) < element(0, doublearray)))
(3 rows)

--Testcase 155:
SELECT floatarray, doublearray FROM time_series2 WHERE element(2, floatarray)*10 < element(0,doublearray);
     floatarray     |        doublearray         
--------------------+----------------------------
 {4.2,24.54,70.55}  | {4431.63,-200.14,3265.1}
 {22.5,12.11,23.54} | {3567.21,2124.23,-1254.11}
(2 rows)

--Testcase 156:
EXPLAIN VERBOSE
SELECT timestamparray FROM time_series2 WHERE element(1,timestamparray) > '2020-12-29 04:00:00';
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..503.52 rows=487 width=32)
   Output: timestamparray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((element(1, timestamparray) > TIMESTAMP('2020-12-29T04:00:00Z')))
(3 rows)

--Testcase 157:
SELECT timestamparray FROM time_series2 WHERE element(1,timestamparray) > '2020-12-29 04:00:00';
                           timestamparray                            
---------------------------------------------------------------------
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
 {"2020-12-31 14:00:00","2020-12-31 14:45:00","2020-01-01 15:00:00"}
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
 {"2020-12-29 04:45:00","2020-12-29 04:46:00"}
(4 rows)

--Return error when getting non-existent element
--Testcase 158:
EXPLAIN VERBOSE
SELECT timestamparray FROM time_series2 WHERE element(2,timestamparray) > '2020-12-29 04:00:00';
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..503.52 rows=487 width=32)
   Output: timestamparray
   Remote SQL: SELECT  *  FROM time_series2 WHERE ((element(2, timestamparray) > TIMESTAMP('2020-12-29T04:00:00Z')))
(3 rows)

--Testcase 159:
SELECT timestamparray FROM time_series2 WHERE element(2,timestamparray) > '2020-12-29 04:00:00';
ERROR:  GridDB-API is failed by 152009
  [152009:TQ_CONSTRAINT_ARRAY_OUT_OF_RANGE] Specified index is out of range. (address=127.0.0.1:10001, partition=31)
  [152009:TQ_CONSTRAINT_ARRAY_OUT_OF_RANGE] Specified index is out of range.

--
--if user selects non-unique functions which Griddb only supports in WHERE clause => do not push down
--if user selects unique functions which Griddb only supports in WHERE clause => still push down, return error of Griddb
--
--Testcase 160:
EXPLAIN VERBOSE
SELECT char_length(name) FROM student;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..157.52 rows=1462 width=4)
   Output: char_length(name)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 161:
SELECT char_length(name) FROM student;
 char_length 
-------------
           4
           5
           6
           3
(4 rows)

--Testcase 338:
EXPLAIN VERBOSE
SELECT concat(name,'abc') FROM student;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..157.52 rows=1462 width=32)
   Output: concat(name, 'abc')
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 339:
SELECT concat(name,'abc') FROM student;
  concat   
-----------
 fredabc
 larryabc
 GEORGEabc
 BOBabc
(4 rows)

--Testcase 162:
EXPLAIN VERBOSE
SELECT substr(name,2,3) FROM student;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..157.52 rows=1462 width=32)
   Output: substr(name, 2, 3)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 163:
SELECT substr(name,2,3) FROM student;
 substr 
--------
 red
 arr
 EOR
 OB
(4 rows)

--Testcase 164:
EXPLAIN VERBOSE
SELECT element(1, timestamparray) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..519.36 rows=1462 width=8)
   Output: element(1, timestamparray)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 165:
SELECT element(1, timestamparray) FROM time_series2;
ERROR:  stub element(integer, anyarray) is called
CONTEXT:  PL/pgSQL function element(integer,anyarray) line 3 at RAISE
--Testcase 166:
EXPLAIN VERBOSE
SELECT upper(name) FROM student;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..157.52 rows=1462 width=32)
   Output: upper(name)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 167:
SELECT upper(name) FROM student;
 upper  
--------
 FRED
 LARRY
 GEORGE
 BOB
(4 rows)

--Testcase 168:
EXPLAIN VERBOSE
SELECT lower(name) FROM student;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..157.52 rows=1462 width=32)
   Output: lower(name)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 169:
SELECT lower(name) FROM student;
 lower  
--------
 fred
 larry
 george
 bob
(4 rows)

--Testcase 170:
EXPLAIN VERBOSE
SELECT round(gpa) FROM student;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..193.20 rows=2560 width=8)
   Output: round(gpa)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 171:
SELECT round(gpa) FROM student;
 round 
-------
     4
     3
     4
     2
(4 rows)

--Testcase 172:
EXPLAIN VERBOSE
SELECT floor(gpa) FROM student;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..193.20 rows=2560 width=8)
   Output: floor(gpa)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 173:
SELECT floor(gpa) FROM student;
 floor 
-------
     3
     3
     3
     2
(4 rows)

--Testcase 174:
EXPLAIN VERBOSE
SELECT ceiling(gpa) FROM student;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.student  (cost=100.00..193.20 rows=2560 width=8)
   Output: ceiling(gpa)
   Remote SQL: SELECT  *  FROM student
(3 rows)

--Testcase 175:
SELECT ceiling(gpa) FROM student;
 ceiling 
---------
       4
       4
       4
       3
(4 rows)

--Testcase 176:
EXPLAIN VERBOSE
SELECT griddb_timestamp(strcol) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..519.36 rows=1462 width=8)
   Output: griddb_timestamp(strcol)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 177:
SELECT griddb_timestamp(strcol) FROM time_series2;
ERROR:  stub griddb_timestamp(text) is called
CONTEXT:  PL/pgSQL function griddb_timestamp(text) line 3 at RAISE
--Testcase 178:
EXPLAIN VERBOSE
SELECT timestampadd('YEAR', date, -1) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..826.80 rows=2560 width=8)
   Output: timestampadd('YEAR'::time_unit, date, '-1'::integer)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 179:
SELECT timestampadd('YEAR', date, -1) FROM time_series2;
ERROR:  stub timestampadd(time_unit, timestamp, integer) is called
CONTEXT:  PL/pgSQL function timestampadd(time_unit,timestamp without time zone,integer) line 3 at RAISE
--Testcase 180:
EXPLAIN VERBOSE
SELECT timestampdiff('YEAR', date, '2018-01-04 08:48:00') FROM time_series2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..826.80 rows=2560 width=8)
   Output: timestampdiff('YEAR'::time_unit, date, '2018-01-04 08:48:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 181:
SELECT timestampdiff('YEAR', date, '2018-01-04 08:48:00') FROM time_series2;
ERROR:  stub timestampdiff(time_unit, timestamp, timestamp) is called
CONTEXT:  PL/pgSQL function timestampdiff(time_unit,timestamp without time zone,timestamp without time zone) line 3 at RAISE
--Testcase 182:
EXPLAIN VERBOSE
SELECT to_timestamp_ms(intcol) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..936.31 rows=2925 width=8)
   Output: to_timestamp_ms((intcol)::bigint)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 183:
SELECT to_timestamp_ms(intcol) FROM time_series2;
ERROR:  stub to_timestamp_ms(bigint) is called
CONTEXT:  PL/pgSQL function to_timestamp_ms(bigint) line 3 at RAISE
--Testcase 184:
EXPLAIN VERBOSE
SELECT to_epoch_ms(date) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..826.80 rows=2560 width=8)
   Output: to_epoch_ms(date)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 185:
SELECT to_epoch_ms(date) FROM time_series2;
ERROR:  stub to_epoch_ms(timestamp) is called
CONTEXT:  PL/pgSQL function to_epoch_ms(timestamp without time zone) line 3 at RAISE
--Testcase 186:
EXPLAIN VERBOSE
SELECT array_length(boolarray) FROM time_series2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..519.36 rows=1462 width=4)
   Output: array_length(boolarray)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 187:
SELECT array_length(boolarray) FROM time_series2;
ERROR:  stub array_length(anyarray) is called
CONTEXT:  PL/pgSQL function array_length(anyarray) line 3 at RAISE
--Testcase 188:
EXPLAIN VERBOSE
SELECT element(1, stringarray) FROM time_series2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series2  (cost=100.00..519.36 rows=1462 width=32)
   Output: element(1, stringarray)
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 189:
SELECT element(1, stringarray) FROM time_series2;
ERROR:  stub element(integer, anyarray) is called
CONTEXT:  PL/pgSQL function element(integer,anyarray) line 3 at RAISE
--
--Test for unique functions of GridDB in SELECT clause: time-series functions
--
--time_next
--specified time exist => return that row
--Testcase 190:
EXPLAIN VERBOSE
SELECT time_next('2018-12-01 10:00:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next('2018-12-01 10:00:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 191:
SELECT time_next('2018-12-01 10:00:00') FROM time_series;
ERROR:  stub time_next(timestamp) is called
CONTEXT:  PL/pgSQL function time_next(timestamp without time zone) line 3 at RAISE
--specified time does not exist => return the row whose time  is immediately after the specified time
--Testcase 192:
EXPLAIN VERBOSE
SELECT time_next('2018-12-01 10:05:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next('2018-12-01 10:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 193:
SELECT time_next('2018-12-01 10:05:00') FROM time_series;
ERROR:  stub time_next(timestamp) is called
CONTEXT:  PL/pgSQL function time_next(timestamp without time zone) line 3 at RAISE
--specified time does not exist, there is no time after the specified time => return no row
--Testcase 194:
EXPLAIN VERBOSE
SELECT time_next('2018-12-01 10:45:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next('2018-12-01 10:45:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 195:
SELECT time_next('2018-12-01 10:45:00') FROM time_series;
ERROR:  stub time_next(timestamp) is called
CONTEXT:  PL/pgSQL function time_next(timestamp without time zone) line 3 at RAISE
--time_next_only
--even though specified time exist, still return the row whose time is immediately after the specified time
--Testcase 196:
EXPLAIN VERBOSE
SELECT time_next_only('2018-12-01 10:00:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next_only('2018-12-01 10:00:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 197:
SELECT time_next_only('2018-12-01 10:00:00') FROM time_series;
ERROR:  stub time_next_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_next_only(timestamp without time zone) line 3 at RAISE
--specified time does not exist => return the row whose time  is immediately after the specified time
--Testcase 198:
EXPLAIN VERBOSE
SELECT time_next_only('2018-12-01 10:05:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next_only('2018-12-01 10:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 199:
SELECT time_next_only('2018-12-01 10:05:00') FROM time_series;
ERROR:  stub time_next_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_next_only(timestamp without time zone) line 3 at RAISE
--there is no time after the specified time => return no row
--Testcase 200:
EXPLAIN VERBOSE
SELECT time_next_only('2018-12-01 10:45:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_next_only('2018-12-01 10:45:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 201:
SELECT time_next_only('2018-12-01 10:45:00') FROM time_series;
ERROR:  stub time_next_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_next_only(timestamp without time zone) line 3 at RAISE
--time_prev
--specified time exist => return that row
--Testcase 202:
EXPLAIN VERBOSE
SELECT time_prev('2018-12-01 10:10:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev('2018-12-01 10:10:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 203:
SELECT time_prev('2018-12-01 10:10:00') FROM time_series;
ERROR:  stub time_prev(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev(timestamp without time zone) line 3 at RAISE
--specified time does not exist => return the row whose time  is immediately before the specified time
--Testcase 204:
EXPLAIN VERBOSE
SELECT time_prev('2018-12-01 10:05:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev('2018-12-01 10:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 205:
SELECT time_prev('2018-12-01 10:05:00') FROM time_series;
ERROR:  stub time_prev(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev(timestamp without time zone) line 3 at RAISE
--specified time does not exist, there is no time before the specified time => return no row
--Testcase 206:
EXPLAIN VERBOSE
SELECT time_prev('2018-12-01 09:45:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev('2018-12-01 09:45:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 207:
SELECT time_prev('2018-12-01 09:45:00') FROM time_series;
ERROR:  stub time_prev(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev(timestamp without time zone) line 3 at RAISE
--time_prev_only
--even though specified time exist, still return the row whose time is immediately before the specified time
--Testcase 208:
EXPLAIN VERBOSE
SELECT time_prev_only('2018-12-01 10:10:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev_only('2018-12-01 10:10:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 209:
SELECT time_prev_only('2018-12-01 10:10:00') FROM time_series;
ERROR:  stub time_prev_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev_only(timestamp without time zone) line 3 at RAISE
--specified time does not exist => return the row whose time  is immediately before the specified time
--Testcase 210:
EXPLAIN VERBOSE
SELECT time_prev_only('2018-12-01 10:05:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev_only('2018-12-01 10:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 211:
SELECT time_prev_only('2018-12-01 10:05:00') FROM time_series;
ERROR:  stub time_prev_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev_only(timestamp without time zone) line 3 at RAISE
--there is no time before the specified time => return no row
--Testcase 212:
EXPLAIN VERBOSE
SELECT time_prev_only('2018-12-01 09:45:00') FROM time_series;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_prev_only('2018-12-01 09:45:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 213:
SELECT time_prev_only('2018-12-01 09:45:00') FROM time_series;
ERROR:  stub time_prev_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev_only(timestamp without time zone) line 3 at RAISE
--time_interpolated
--specified time exist => return that row
--Testcase 214:
EXPLAIN VERBOSE
SELECT time_interpolated(value1, '2018-12-01 10:10:00') FROM time_series;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_interpolated(value1, '2018-12-01 10:10:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 215:
SELECT time_interpolated(value1, '2018-12-01 10:10:00') FROM time_series;
ERROR:  stub time_interpolated(anyelement, timestamp) is called
CONTEXT:  PL/pgSQL function time_interpolated(anyelement,timestamp without time zone) line 3 at RAISE
--specified time does not exist => return the row which has interpolated value.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 216:
EXPLAIN VERBOSE
SELECT time_interpolated(value1, '2018-12-01 10:05:00') FROM time_series;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_interpolated(value1, '2018-12-01 10:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 217:
SELECT time_interpolated(value1, '2018-12-01 10:05:00') FROM time_series;
ERROR:  stub time_interpolated(anyelement, timestamp) is called
CONTEXT:  PL/pgSQL function time_interpolated(anyelement,timestamp without time zone) line 3 at RAISE
--specified time does not exist. There is no row before or after the specified time => can not calculate interpolated value, return no row.
--Testcase 218:
EXPLAIN VERBOSE
SELECT time_interpolated(value1, '2018-12-01 09:05:00') FROM time_series;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_interpolated(value1, '2018-12-01 09:05:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 219:
SELECT time_interpolated(value1, '2018-12-01 09:05:00') FROM time_series;
ERROR:  stub time_interpolated(anyelement, timestamp) is called
CONTEXT:  PL/pgSQL function time_interpolated(anyelement,timestamp without time zone) line 3 at RAISE
--Testcase 220:
EXPLAIN VERBOSE
SELECT time_interpolated(value1, '2018-12-01 10:45:00') FROM time_series;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_interpolated(value1, '2018-12-01 10:45:00'::timestamp without time zone)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 221:
SELECT time_interpolated(value1, '2018-12-01 10:45:00') FROM time_series;
ERROR:  stub time_interpolated(anyelement, timestamp) is called
CONTEXT:  PL/pgSQL function time_interpolated(anyelement,timestamp without time zone) line 3 at RAISE
--time_sampling by MINUTE
--rows for sampling exists => return those rows
--Testcase 222:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:20:00', 10, 'MINUTE') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 10:20:00'::timestamp without time zone, 10, 'MINUTE'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 223:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:20:00', 10, 'MINUTE') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--rows for sampling does not exist => return rows that contains interpolated values.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 224:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:05:00', '2018-12-01 10:35:00', 10, 'MINUTE') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:05:00'::timestamp without time zone, '2018-12-01 10:35:00'::timestamp without time zone, 10, 'MINUTE'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 225:
SELECT time_sampling(value1, '2018-12-01 10:05:00', '2018-12-01 10:35:00', 10, 'MINUTE') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--mix exist and non-exist sampling
--Testcase 226:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 10:40:00'::timestamp without time zone, 10, 'MINUTE'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 227:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--In linearly interpolating the value of the previous and next rows, if one of the values does not exist => the sampling row will not be returned
--Testcase 228:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 09:30:00', '2018-12-01 11:00:00', 10, 'MINUTE') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 09:30:00'::timestamp without time zone, '2018-12-01 11:00:00'::timestamp without time zone, 10, 'MINUTE'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 229:
SELECT time_sampling(value1, '2018-12-01 09:30:00', '2018-12-01 11:00:00', 10, 'MINUTE') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--if the first parameter is not set, * will be added as the first parameter.
--When specified time does not exist, all columns (except timestamp key column) will be equal to the values of rows previous to the specified time.
--Testcase 230:
UPDATE time_series SET value1 = 5 where date = '2018-12-01 10:40:00';
--Testcase 231:
EXPLAIN VERBOSE
SELECT time_sampling('2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE') FROM time_series;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_sampling('2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 10:40:00'::timestamp without time zone, 10, 'MINUTE'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 232:
SELECT time_sampling('2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE') FROM time_series;
ERROR:  stub time_sampling(timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--time_sampling by HOUR
--Testcase 233:
DELETE FROM time_series;
--Testcase 234:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00', 1, 10.5);
--Testcase 235:
INSERT INTO time_series VALUES ('2018-12-01 12:00:00', 2, 9.4);
--Testcase 236:
INSERT INTO time_series VALUES ('2018-12-01 16:00:00', 3, 8);
--Testcase 237:
INSERT INTO time_series VALUES ('2018-12-01 17:00:00', 4, 7.2);
--Testcase 238:
INSERT INTO time_series VALUES ('2018-12-01 20:00:00', 5, 5.6);
--rows for sampling exists => return those rows
--Testcase 239:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 12:00:00', 2, 'HOUR') FROM time_series;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 2, 'HOUR'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 240:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 12:00:00', 2, 'HOUR') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--rows for sampling does not exist => return rows that contains interpolated values.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 241:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:05:00', '2018-12-01 21:00:00', 3, 'HOUR') FROM time_series;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:05:00'::timestamp without time zone, '2018-12-01 21:00:00'::timestamp without time zone, 3, 'HOUR'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 242:
SELECT time_sampling(value1, '2018-12-01 10:05:00', '2018-12-01 21:00:00', 3, 'HOUR') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--mix exist and non-exist sampling
--Testcase 243:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 21:40:00', 2, 'HOUR') FROM time_series;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 21:40:00'::timestamp without time zone, 2, 'HOUR'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 244:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 21:40:00', 2, 'HOUR') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--In linearly interpolating the value of the previous and next rows, if one of the values does not exist => the sampling row will not be returned
--Testcase 245:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 6:00:00', '2018-12-01 23:00:00', 3, 'HOUR') FROM time_series;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 06:00:00'::timestamp without time zone, '2018-12-01 23:00:00'::timestamp without time zone, 3, 'HOUR'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 246:
SELECT time_sampling(value1, '2018-12-01 6:00:00', '2018-12-01 23:00:00', 3, 'HOUR') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--if the first parameter is not set, * will be added as the first parameter.
--When specified time does not exist, all columns (except timestamp key column) will be equal to the values of rows previous to the specified time.
--Testcase 247:
DELETE FROM time_series WHERE value1 = 4;
--Testcase 248:
EXPLAIN VERBOSE
SELECT time_sampling('2018-12-01 10:00:00', '2018-12-01 21:40:00', 2, 'HOUR') FROM time_series;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1065.64 rows=3413 width=32)
   Output: time_sampling('2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 21:40:00'::timestamp without time zone, 2, 'HOUR'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 249:
SELECT time_sampling('2018-12-01 10:00:00', '2018-12-01 21:40:00', 2, 'HOUR') FROM time_series;
ERROR:  stub time_sampling(timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--time_sampling by DAY
--Testcase 250:
DELETE FROM time_series;
--Testcase 251:
INSERT INTO time_series VALUES ('2018-12-01 11:00:00', 4, 4);
--Testcase 252:
INSERT INTO time_series VALUES ('2018-12-02 11:00:00', 5, 3.2);
--Testcase 253:
INSERT INTO time_series VALUES ('2018-12-02 12:00:30', 6, 3);
--Testcase 254:
INSERT INTO time_series VALUES ('2018-12-03 12:00:30', 7, 2.8);
--rows for sampling exists => return those rows
--Testcase 255:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-02 11:00:00', 1, 'DAY') FROM time_series;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-02 11:00:00'::timestamp without time zone, 1, 'DAY'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 256:
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-02 11:00:00', 1, 'DAY') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--rows for sampling does not exist => return rows that contains interpolated values.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 257:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 09:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 09:00:00'::timestamp without time zone, '2018-12-03 12:00:00'::timestamp without time zone, 1, 'DAY'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 258:
SELECT time_sampling(value1, '2018-12-01 09:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--mix exist and non-exist sampling
--Testcase 259:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-03 12:00:00'::timestamp without time zone, 1, 'DAY'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 260:
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--In linearly interpolating the value of the previous and next rows, if one of the values does not exist => the sampling row will not be returned
--Testcase 261:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 09:30:00', '2018-12-01 11:00:00', 1, 'DAY') FROM time_series;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 09:30:00'::timestamp without time zone, '2018-12-01 11:00:00'::timestamp without time zone, 1, 'DAY'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 262:
SELECT time_sampling(value1, '2018-12-01 09:30:00', '2018-12-05 11:00:00', 1, 'DAY') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--if the first parameter is not set, * will be added as the first parameter.
--When specified time does not exist, all columns (except timestamp key column) will be equal to the values of rows previous to the specified time.
--Testcase 263:
DELETE FROM time_series WHERE value1 = 6;
--Testcase 264:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-03 12:00:00'::timestamp without time zone, 1, 'DAY'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 265:
SELECT time_sampling(value1, '2018-12-01 11:00:00', '2018-12-03 12:00:00', 1, 'DAY') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--time_sampling by SECOND
--Testcase 266:
DELETE FROM time_series;
--Testcase 267:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00', 1, 1.5);
--Testcase 268:
INSERT INTO time_series VALUES ('2018-12-01 10:00:10', 2, 3.2);
--Testcase 269:
INSERT INTO time_series VALUES ('2018-12-01 10:00:20', 4, 3.5);
--Testcase 270:
INSERT INTO time_series VALUES ('2018-12-01 10:00:40', 6, 5.2);
--Testcase 271:
INSERT INTO time_series VALUES ('2018-12-01 10:01:10', 7, 6.7);
--rows for sampling exists => return those rows
--Testcase 272:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:00:20', 10, 'SECOND') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 10:00:20'::timestamp without time zone, 10, 'SECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 273:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:00:20', 10, 'SECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--rows for sampling does not exist => return rows that contains interpolated values.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 274:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:03', '2018-12-01 10:00:35', 15, 'SECOND') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:03'::timestamp without time zone, '2018-12-01 10:00:35'::timestamp without time zone, 15, 'SECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 275:
SELECT time_sampling(value1, '2018-12-01 10:00:03', '2018-12-01 10:00:35', 15, 'SECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--mix exist and non-exist sampling
--Testcase 276:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 11:00:00', 10, 'SECOND') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 11:00:00'::timestamp without time zone, 10, 'SECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 277:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 11:00:00', 10, 'SECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--In linearly interpolating the value of the previous and next rows, if one of the values does not exist => the sampling row will not be returned
--Testcase 278:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 08:30:00', '2018-12-01 11:00:00', 20, 'SECOND') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 08:30:00'::timestamp without time zone, '2018-12-01 11:00:00'::timestamp without time zone, 20, 'SECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 279:
SELECT time_sampling(value1, '2018-12-01 08:30:00', '2018-12-01 11:00:00', 20, 'SECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--if the first parameter is not set, * will be added as the first parameter.
--When specified time does not exist, all columns (except timestamp key column) will be equal to the values of rows previous to the specified time.
--Testcase 280:
DELETE FROM time_series WHERE value1 = 4;
--Testcase 281:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 11:00:00', 10, 'SECOND') FROM time_series;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00'::timestamp without time zone, '2018-12-01 11:00:00'::timestamp without time zone, 10, 'SECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 282:
SELECT time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 11:00:00', 10, 'SECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--time_sampling by MILLISECOND
--Testcase 283:
DELETE FROM time_series;
--Testcase 284:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00.100', 1, 1.5);
--Testcase 285:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00.120', 2, 3.2);
--Testcase 286:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00.140', 4, 3.5);
--Testcase 287:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00.150', 6, 5.2);
--Testcase 288:
INSERT INTO time_series VALUES ('2018-12-01 10:00:00.160', 7, 6.7);
--rows for sampling exists => return those rows
--Testcase 289:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.140', 20, 'MILLISECOND') FROM time_series;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00.1'::timestamp without time zone, '2018-12-01 10:00:00.14'::timestamp without time zone, 20, 'MILLISECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 290:
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.140', 20, 'MILLISECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--rows for sampling does not exist => return rows that contains interpolated values.
--The column which is specified as the 1st parameter will be calculated by linearly interpolating the value of the previous and next rows.
--Other values will be equal to the values of rows previous to the specified time.
--Testcase 291:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00.115', '2018-12-01 10:00:00.155', 15, 'MILLISECOND') FROM time_series;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00.115'::timestamp without time zone, '2018-12-01 10:00:00.155'::timestamp without time zone, 15, 'MILLISECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 292:
SELECT time_sampling(value1, '2018-12-01 10:00:00.115', '2018-12-01 10:00:00.155', 15, 'MILLISECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--mix exist and non-exist sampling
--Testcase 293:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.150', 5, 'MILLISECOND') FROM time_series;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00.1'::timestamp without time zone, '2018-12-01 10:00:00.15'::timestamp without time zone, 5, 'MILLISECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 294:
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.150', 5, 'MILLISECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--In linearly interpolating the value of the previous and next rows, if one of the values does not exist => the sampling row will not be returned
--Testcase 295:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00.002', '2018-12-01 10:00:00.500', 20, 'MILLISECOND') FROM time_series;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00.002'::timestamp without time zone, '2018-12-01 10:00:00.5'::timestamp without time zone, 20, 'MILLISECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 296:
SELECT time_sampling(value1, '2018-12-01 10:00:00.002', '2018-12-01 10:00:00.500', 20, 'MILLISECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--if the first parameter is not set, * will be added as the first parameter.
--When specified time does not exist, all columns (except timestamp key column) will be equal to the values of rows previous to the specified time.
--Testcase 297:
DELETE FROM time_series WHERE value1 = 4;
--Testcase 298:
EXPLAIN VERBOSE
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.150', 5, 'MILLISECOND') FROM time_series;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..929.00 rows=2925 width=32)
   Output: time_sampling(value1, '2018-12-01 10:00:00.1'::timestamp without time zone, '2018-12-01 10:00:00.15'::timestamp without time zone, 5, 'MILLISECOND'::time_unit)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 299:
SELECT time_sampling(value1, '2018-12-01 10:00:00.100', '2018-12-01 10:00:00.150', 5, 'MILLISECOND') FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--max_rows
--Testcase 300:
DELETE FROM time_series;
--Testcase 301:
INSERT INTO time_series VALUES ('2018-12-01 11:00:00', 4, 4);
--Testcase 302:
INSERT INTO time_series VALUES ('2018-12-02 11:00:00', 5, 3.2);
--Testcase 303:
INSERT INTO time_series VALUES ('2018-12-02 12:00:30', 6, 3);
--Testcase 304:
INSERT INTO time_series VALUES ('2018-12-03 12:00:30', 7, 2.8);
--Testcase 305:
EXPLAIN VERBOSE
SELECT max_rows(value2) FROM time_series;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..826.80 rows=2560 width=32)
   Output: max_rows(value2)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 306:
SELECT max_rows(value2) FROM time_series;
ERROR:  stub max_rows(anyelement) is called
CONTEXT:  PL/pgSQL function max_rows(anyelement) line 3 at RAISE
--Testcase 307:
EXPLAIN VERBOSE
SELECT max_rows(date) FROM time_series;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..826.80 rows=2560 width=32)
   Output: max_rows(date)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 308:
SELECT max_rows(date) FROM time_series;
ERROR:  stub max_rows(anyelement) is called
CONTEXT:  PL/pgSQL function max_rows(anyelement) line 3 at RAISE
--min_rows
--Testcase 309:
EXPLAIN VERBOSE
SELECT min_rows(value2) FROM time_series;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..826.80 rows=2560 width=32)
   Output: min_rows(value2)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 310:
SELECT min_rows(value2) FROM time_series;
ERROR:  stub min_rows(anyelement) is called
CONTEXT:  PL/pgSQL function min_rows(anyelement) line 3 at RAISE
--Testcase 311:
EXPLAIN VERBOSE
SELECT min_rows(date) FROM time_series;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..826.80 rows=2560 width=32)
   Output: min_rows(date)
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 312:
SELECT min_rows(date) FROM time_series;
ERROR:  stub min_rows(anyelement) is called
CONTEXT:  PL/pgSQL function min_rows(anyelement) line 3 at RAISE
--
--if WHERE clause contains functions which Griddb only supports in SELECT clause => still push down, return error of Griddb
--
--Testcase 313:
EXPLAIN VERBOSE
SELECT * FROM time_series2 WHERE time_next('2018-12-01 10:00:00') = '"2020-01-05 21:00:00,{t,f,t}"';
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=100.25..116.07 rows=194 width=397)
   Output: date, date2, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol, blobcol, stringarray, boolarray, bytearray, shortarray, integerarray, longarray, floatarray, doublearray, timestamparray
   One-Time Filter: (time_next('2018-12-01 10:00:00'::timestamp without time zone) = '"2020-01-05 21:00:00,{t,f,t}"'::text)
   ->  Foreign Scan on public.time_series2  (cost=100.25..116.07 rows=194 width=397)
         Output: date, date2, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol, blobcol, stringarray, boolarray, bytearray, shortarray, integerarray, longarray, floatarray, doublearray, timestamparray
         Remote SQL: SELECT  *  FROM time_series2
(6 rows)

--Testcase 314:
SELECT * FROM time_series2 WHERE time_next('2018-12-01 10:00:00') = '"2020-01-05 21:00:00,{t,f,t}"';
ERROR:  stub time_next(timestamp) is called
CONTEXT:  PL/pgSQL function time_next(timestamp without time zone) line 3 at RAISE
--Testcase 315:
EXPLAIN VERBOSE
SELECT date FROM time_series WHERE time_next_only('2018-12-01 10:00:00') = time_interpolated(value1, '2018-12-01 10:10:00');
ERROR:  stub time_next_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_next_only(timestamp without time zone) line 3 at RAISE
--Testcase 316:
SELECT date FROM time_series WHERE time_next_only('2018-12-01 10:00:00') = time_interpolated(value1, '2018-12-01 10:10:00');
ERROR:  stub time_next_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_next_only(timestamp without time zone) line 3 at RAISE
--Testcase 317:
EXPLAIN VERBOSE
SELECT * FROM time_series2 WHERE time_prev('2018-12-01 10:00:00') = '"2020-01-05 21:00:00,{t,f,t}"';
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=100.25..116.07 rows=194 width=397)
   Output: date, date2, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol, blobcol, stringarray, boolarray, bytearray, shortarray, integerarray, longarray, floatarray, doublearray, timestamparray
   One-Time Filter: (time_prev('2018-12-01 10:00:00'::timestamp without time zone) = '"2020-01-05 21:00:00,{t,f,t}"'::text)
   ->  Foreign Scan on public.time_series2  (cost=100.25..116.07 rows=194 width=397)
         Output: date, date2, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol, blobcol, stringarray, boolarray, bytearray, shortarray, integerarray, longarray, floatarray, doublearray, timestamparray
         Remote SQL: SELECT  *  FROM time_series2
(6 rows)

--Testcase 318:
SELECT * FROM time_series2 WHERE time_prev('2018-12-01 10:00:00') = '"2020-01-05 21:00:00,{t,f,t}"';
ERROR:  stub time_prev(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev(timestamp without time zone) line 3 at RAISE
--Testcase 319:
EXPLAIN VERBOSE
SELECT date FROM time_series WHERE time_prev_only('2018-12-01 10:00:00') = time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE');
ERROR:  stub time_prev_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev_only(timestamp without time zone) line 3 at RAISE
--Testcase 320:
SELECT date FROM time_series WHERE time_prev_only('2018-12-01 10:00:00') = time_sampling(value1, '2018-12-01 10:00:00', '2018-12-01 10:40:00', 10, 'MINUTE');
ERROR:  stub time_prev_only(timestamp) is called
CONTEXT:  PL/pgSQL function time_prev_only(timestamp without time zone) line 3 at RAISE
--Testcase 321:
EXPLAIN VERBOSE
SELECT * FROM time_series WHERE max_rows(date) = min_rows(value2);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..1063.94 rows=9 width=20)
   Output: date, value1, value2
   Remote SQL: SELECT  *  FROM time_series WHERE ((max_rows(date) = min_rows(value2)))
(3 rows)

--Testcase 322:
SELECT * FROM time_series WHERE max_rows(date) = min_rows(value2);
ERROR:  GridDB-API is failed by 150014
  [150014:TQ_FUNCTION_NOT_FOUND] No such function : MAX_ROWS (address=127.0.0.1:10001, partition=91)
  [150014:TQ_FUNCTION_NOT_FOUND] No such function : MAX_ROWS

--
-- Test syntax (xxx()::time_series).*
--
--Testcase 323:
EXPLAIN VERBOSE
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).* FROM time_series;


 Foreign Scan on public.time_series  (cost=100.00..2435.38 rows=2925 width=20)
   Output: ((time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series).date, ((time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series).value1, ((time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series).value2
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 324:
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).* FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--Testcase 325:
EXPLAIN VERBOSE
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).date FROM time_series;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..943.62 rows=2925 width=8)
   Output: ((time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series).date
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 326:
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).date FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--Testcase 327:
EXPLAIN VERBOSE
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).value1 FROM time_series;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.time_series  (cost=100.00..943.62 rows=2925 width=4)
   Output: ((time_sampling(value1, '2018-12-01 11:00:00'::timestamp without time zone, '2018-12-01 12:00:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series).value1
   Remote SQL: SELECT  *  FROM time_series
(3 rows)

--Testcase 328:
SELECT (time_sampling(value1, '2018-12-01 11:00:00', '2018-12-01 12:00:00', 20, 'MINUTE')::time_series).value1 FROM time_series;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--
-- Test syntax (xxx()::time_series2).*
--
--Testcase 376:
DELETE FROM time_series2;
--Testcase 377:
INSERT INTO time_series2 VALUES ('2020-12-20 05:00:00', '2020-12-20 08:00:00', '(3.1, 2.3)', 'f', 1, 175, 1234, 7705, 15.72, 1435.22, '2F63A64D987344F83AC8', ARRAY['7777a32ebea96a918b0f','40ee382083b987e94dd1','d417cf517eca8c2a709a'],
ARRAY['t'::boolean,'t'::boolean,'f'::boolean,'f'::boolean],ARRAY[12,29,1,14,16],ARRAY[255,124,77,51],ARRAY[2697,2641,7777],ARRAY[12475,12346,12654],ARRAY[22.5,12.11,23.54],ARRAY[3567.21,2124.23,-1254.11],
ARRAY['2020-05-19 14:15:20'::timestamp,'2020-11-14 17:45:14'::timestamp, '2020-09-05 01:24:06']);
--Testcase 377:
INSERT INTO time_series2 VALUES ('2020-12-20 06:00:00', '2020-12-20 09:00:00', '(1.3, 3.2)', 'f', 2, 175, 1234, 7705, 15.72, 1435.22, '2F63A64D987344F83AC8', ARRAY['7777a32ebea96a918b0f','40ee382083b987e94dd1','d417cf517eca8c2a709a'],
ARRAY['t'::boolean,'t'::boolean,'f'::boolean,'f'::boolean],ARRAY[12,29,1,14,16],ARRAY[255,124,77,51],ARRAY[2697,2641,7777],ARRAY[12475,12346,12654],ARRAY[22.5,12.11,23.54],ARRAY[3567.21,2124.23,-1254.11],
ARRAY['2020-05-19 14:15:20'::timestamp,'2020-11-14 17:45:14'::timestamp, '2020-09-05 01:24:06']);
--Testcase 378:
EXPLAIN VERBOSE
SELECT (time_sampling(bytecol, '2020-12-20 05:00:00', '2020-12-20 05:20:00', 20, 'MINUTE')::time_series2).* FROM time_series2;


 Foreign Scan on public.time_series2  (cost=100.00..16269.50 rows=3150 width=397)
   Output: ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).date, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).date2, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).strcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).booleancol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).bytecol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).shortcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).intcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).longcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).floatcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).doublecol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).blobcol, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).stringarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).boolarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).bytearray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).shortarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).integerarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).longarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).floatarray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).doublearray, ((time_sampling(bytecol, '2020-12-20 05:00:00'::timestamp without time zone, '2020-12-20 05:20:00'::timestamp without time zone, 20, 'MINUTE'::time_unit))::time_series2).timestamparray
   Remote SQL: SELECT  *  FROM time_series2
(3 rows)

--Testcase 379:
SELECT (time_sampling(bytecol, '2020-12-20 05:00:00', '2020-12-20 05:20:00', 20, 'MINUTE')::time_series2).* FROM time_series2;
ERROR:  stub time_sampling(anyelement,timestamp,timestamp,integer,time_unit) is called
CONTEXT:  PL/pgSQL function time_sampling(anyelement,timestamp without time zone,timestamp without time zone,integer,time_unit) line 3 at RAISE
--
-- Test aggregate function time_avg
--
--Testcase 340:
EXPLAIN VERBOSE
SELECT time_avg(value1) FROM time_series;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (time_avg(value1))
   Remote SQL: SELECT time_avg(value1) FROM time_series
(3 rows)

--Testcase 341:
SELECT time_avg(value1) FROM time_series;
 time_avg 
----------
      5.5
(1 row)

--Testcase 342:
EXPLAIN VERBOSE
SELECT time_avg(value2) FROM time_series;
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (time_avg(value2))
   Remote SQL: SELECT time_avg(value2) FROM time_series
(3 rows)

--Testcase 343:
SELECT time_avg(value2) FROM time_series;
      time_avg      
--------------------
 3.2469137901717393
(1 row)

-- GridDB does not support select multiple target in a query => do not push down, raise stub function error
--Testcase 344:
EXPLAIN VERBOSE
SELECT time_avg(value1), time_avg(value2) FROM time_series;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate  (cost=1315.75..1315.76 rows=1 width=16)
   Output: time_avg(value1), time_avg(value2)
   ->  Foreign Scan on public.time_series  (cost=100.00..178.25 rows=2275 width=12)
         Output: date, value1, value2
         Remote SQL: SELECT  *  FROM time_series
(5 rows)

--Testcase 345:
SELECT time_avg(value1), time_avg(value2) FROM time_series;
ERROR:  stub time_avg_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function time_avg_sfunc(double precision,anyelement) line 3 at RAISE
-- Do not push down when expected type is not correct, raise stub function error
--Testcase 346:
EXPLAIN VERBOSE
SELECT time_avg(date) FROM time_series;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate  (cost=826.80..826.81 rows=1 width=8)
   Output: time_avg(date)
   ->  Foreign Scan on public.time_series  (cost=100.00..186.80 rows=2560 width=8)
         Output: date, value1, value2
         Remote SQL: SELECT  *  FROM time_series
(5 rows)

--Testcase 347:
SELECT time_avg(date) FROM time_series;
ERROR:  stub time_avg_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function time_avg_sfunc(double precision,anyelement) line 3 at RAISE
--Testcase 348:
EXPLAIN VERBOSE
SELECT time_avg(blobcol) FROM time_series2;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=519.36..519.37 rows=1 width=8)
   Output: time_avg(blobcol)
   ->  Foreign Scan on public.time_series2  (cost=100.00..153.86 rows=1462 width=32)
         Output: date, date2, strcol, booleancol, bytecol, shortcol, intcol, longcol, floatcol, doublecol, blobcol, stringarray, boolarray, bytearray, shortarray, integerarray, longarray, floatarray, doublearray, timestamparray
         Remote SQL: SELECT  *  FROM time_series2
(5 rows)

--Testcase 349:
SELECT time_avg(blobcol) FROM time_series2;
ERROR:  stub time_avg_sfunc(double precision, anyelement) is called
CONTEXT:  PL/pgSQL function time_avg_sfunc(double precision,anyelement) line 3 at RAISE
--
-- Test aggregate function min, max, count, sum, avg, variance, stddev
--
--Testcase 350:
EXPLAIN VERBOSE
SELECT min(age) FROM student;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=4)
   Output: (min(age))
   Remote SQL: SELECT min(age) FROM student
(3 rows)

--Testcase 351:
SELECT min(age) FROM student;
 min 
-----
  28
(1 row)

--Testcase 352:
EXPLAIN VERBOSE
SELECT max(gpa) FROM student;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (max(gpa))
   Remote SQL: SELECT max(gpa) FROM student
(3 rows)

--Testcase 353:
SELECT max(gpa) FROM student;
 max 
-----
 3.8
(1 row)

--Testcase 354:
EXPLAIN VERBOSE
SELECT count(*) FROM student;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (count(*))
   Remote SQL: SELECT count(*) FROM student
(3 rows)

--Testcase 355:
SELECT count(*) FROM student;
 count 
-------
     4
(1 row)

--Testcase 356:
EXPLAIN VERBOSE
SELECT count(*) FROM student WHERE gpa < 3.5 OR age < 42;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (count(*))
   Remote SQL: SELECT count(*) FROM student WHERE (((gpa < 3.5) OR (age < 42)))
(3 rows)

--Testcase 357:
SELECT count(*) FROM student WHERE gpa < 3.5 OR age < 42;
 count 
-------
     4
(1 row)

--Testcase 358:
EXPLAIN VERBOSE
SELECT sum(age) FROM student;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (sum(age))
   Remote SQL: SELECT sum(age) FROM student
(3 rows)

--Testcase 359:
SELECT sum(age) FROM student;
 sum 
-----
 153
(1 row)

--Testcase 360:
EXPLAIN VERBOSE
SELECT sum(age) FROM student WHERE round(gpa) > 3.5;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (sum(age))
   Remote SQL: SELECT sum(age) FROM student WHERE ((round(gpa) > 3.5))
(3 rows)

--Testcase 361:
SELECT sum(age) FROM student WHERE round(gpa) > 3.5;
 sum 
-----
  58
(1 row)

--Testcase 362:
EXPLAIN VERBOSE
SELECT avg(gpa) FROM student;
                   QUERY PLAN                   
------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (avg(gpa))
   Remote SQL: SELECT avg(gpa) FROM student
(3 rows)

--Testcase 363:
SELECT avg(gpa) FROM student;
        avg         
--------------------
 3.2750000000000004
(1 row)

--Testcase 364:
EXPLAIN VERBOSE
SELECT avg(gpa) FROM student WHERE lower(name) = 'george';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (avg(gpa))
   Remote SQL: SELECT avg(gpa) FROM student WHERE ((lower(name) = 'george'))
(3 rows)

--Testcase 365:
SELECT avg(gpa) FROM student WHERE lower(name) = 'george';
 avg 
-----
 3.8
(1 row)

--Testcase 366:
EXPLAIN VERBOSE
SELECT variance(gpa) FROM student;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (variance(gpa))
   Remote SQL: SELECT variance(gpa) FROM student
(3 rows)

--Testcase 367:
SELECT variance(gpa) FROM student;
      variance       
---------------------
 0.36249999999999716
(1 row)

--Testcase 368:
EXPLAIN VERBOSE
SELECT variance(gpa) FROM student WHERE gpa > 3.5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=8)
   Output: (variance(gpa))
   Remote SQL: SELECT variance(gpa) FROM student WHERE ((gpa > 3.5))
(3 rows)

--Testcase 369:
SELECT variance(gpa) FROM student WHERE gpa > 3.5;
       variance       
----------------------
 0.005000000000002558
(1 row)

--Testcase 370:
EXPLAIN VERBOSE
SELECT stddev(age) FROM student;
                   QUERY PLAN                    
-------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (stddev(age))
   Remote SQL: SELECT stddev(age) FROM student
(3 rows)

--Testcase 371:
SELECT stddev(age) FROM student;
      stddev      
------------------
 14.7958327466441
(1 row)

--Testcase 372:
EXPLAIN VERBOSE
SELECT stddev(age) FROM student WHERE char_length(name) > 4;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan  (cost=1.00..1.00 rows=1 width=32)
   Output: (stddev(age))
   Remote SQL: SELECT stddev(age) FROM student WHERE ((char_length(name) > 4))
(3 rows)

--Testcase 373:
SELECT stddev(age) FROM student WHERE char_length(name) > 4;
      stddev      
------------------
 21.2132034355964
(1 row)

--Testcase 374:
EXPLAIN VERBOSE
SELECT max(gpa), min(age) FROM student;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Result  (cost=20.00..20.01 rows=1 width=12)
   Output: $0, $1
   InitPlan 1 (returns $0)
     ->  Limit  (cost=10.00..10.00 rows=1 width=8)
           Output: student.gpa
           ->  Foreign Scan on public.student  (cost=10.00..10.00 rows=10 width=8)
                 Output: student.gpa
                 Remote SQL: SELECT  *  FROM student WHERE ((gpa IS NOT NULL)) ORDER BY gpa DESC
   InitPlan 2 (returns $1)
     ->  Limit  (cost=10.00..10.00 rows=1 width=4)
           Output: student_1.age
           ->  Foreign Scan on public.student student_1  (cost=10.00..10.00 rows=10 width=4)
                 Output: student_1.age
                 Remote SQL: SELECT  *  FROM student WHERE ((age IS NOT NULL)) ORDER BY age ASC
(14 rows)

--Testcase 375:
SELECT max(gpa), min(age) FROM student;
 max | min 
-----+-----
 3.8 |  28
(1 row)

--Delete inserted values
--Testcase 329:
DELETE FROM student WHERE name = 'GEORGE' or name = 'BOB';
--Drop all foreign tables
--Testcase 330:
DROP FOREIGN TABLE student;
--Testcase 331:
DROP FOREIGN TABLE time_series;
--Testcase 332:
DROP FOREIGN TABLE time_series2;
--Testcase 333:
DROP USER MAPPING FOR public SERVER griddb_svr;
--Testcase 334:
DROP SERVER griddb_svr CASCADE;
--Testcase 335:
DROP EXTENSION griddb_fdw CASCADE;
